1/21/2022
	- Made wrld_to_uv(), collider thickness intercepts ray and projects it from the wrong spot
	- Made Triangle class, includes lots of fun math functions that might be useful later
	NEXT:
	Make player camera controls, program piece model loader
1/23/2022
	- Made player camera controls
	NEXT:
	make uv viewer shader and square shader where uv's are adjusted by keybinds
	fix uv_from_board and wrld_to_uv
1/26/2022
	 - Stress tested the board creation process
	NEXT:
	>>1/23/2022
	Make BoardMesh model loader create a concave collision shape from ArrayMesh if possible
1/27/2022
	 - reworked collision shape system to work with concave meshes
	 - added quick way to switch to debug mode in wrld_to_uv
	NEXT:
	finish shader-based mode of approaching wrld_to_uv()
	program piece model loader
1/28/2022
	 - fixed half of wrld_to_uv(), learned that shader approach wont work because fragment() cannot send data
	 - learned how to use GLSL
	NEXT:
	find cause of and fix bug with wrld_to_uv() where some positions will fail to pass is_surrounding()
	program piece model loader
1/29/2022
	 - started piece model loader, BoardMesh keeps a cache of hard-to-load data on each type of piece and sends it to each of the pieces, instantiated as children of the board staticbody
	NEXT
	fix piece scale calculation to match piece AABB to its square (may have to be dynamic) add piece table param that lets users disable this
	add piece scale rotation to match the normal of the board on their square (maybe also allow user to disable this)
	change Player.raycast() to work with the piece collision layer of the player's team as well as the board
2/4-5/2022
	 - made piece model loader
	 - made implicit teams phase for default pieces 
	 - made symmetrize and no-symmetrize sub-modes for g phase
	 - began move() function
	 - changed forward vector and ff on pieces to be part of their table
	NEXT
	add implicit modes for every phase that pull from default
	use square_to_mdata, square_to_loc and dot product to create
	make AABB system for pieces 
2/6/2022
	 - started resolve_transforms()
	 - made intruction settings for pieces to resist transforms
	NEXT
	 - make square_to_box() to resolve a board square to a mesh
	 - use square_to_box() to cache selectable selectable squares and scale pieces
2/9/2022
	 - make screen_to_uv() like a chad
	 - that's fucken it
	NEXT
	 - make the scale component of resolve_transforms()
	 - start intruction interpereter
2/11/2022
	 - started square_to_box() again
	 - started update_scale() for PieceMesh
	NEXT
	 - finish system for converting uv square to mesh
		 - maybe change the system so that mesh is instantiated from intersecting faces and the "cropped" instead of trying to instantiate in the right shape as is
2/12/2022
	 - continued work on square_to_box()
	NEXT
	- TAKE A BREAK
2/19/2022
	 - took break
	 - continued work on square_to_box() (now shortening to stb)
	NEXT
	 - make stb match verts in outside to corners
	 - if outside is missing verts, add corner verts in new array and make matching indices in outside negative to distinguish from existing verts
	 - slide outside verts onto edge of two closest corners
2/20/2022
	 - fixed stb
	 - created edge set intersection with bound
	 - fixed square_to_basis() to work with broken team definitions
	NEXT
	 - finish stb by adding system to move verts inward and extrude into a box
2/24/2022
	 - shelfed stb for a bit to start fixing comments
	 - holy shit its 11pm i have school tomorrow
	NEXT
	>>2/20/2022
	 - keep fixin comments m'boy
2/25/2022
	 - fixed file stucture, wasn't as hard as I thought it would be
	 - fixed comments for all the Board and Piece classes, there were some bits not even I could figure out, guess the project really is getting big
	 - started Reader class, which will eventually unite the ready functions for Board and Piece with string function dark magic
	NEXT
	>>2/20/2022
	 - fix rest of comments
3/4/2022
	 - continued work on Reader class, fixing Board comments in the process
	NEXT
	>>2/25/2022
	 - make Piece use Reader class
	 - start movement algorithm
3/6/2022
	 - Piece and Board both use Reader class
	 - I don't know why but Board isn't loading Piece correctly and that error is propogating throughout the whole code
	 - Designed algorithm for squishing mesh in stb
	 - Added primitive square checking to Instruction
	NEXT
	>>3/4/2022
3/16/2022
	 - Started building skeleton for movement algorithm
	 - More or less finished revising comments
	 - Patched vectorize() to use a separate format() method for faster recursion calls
	 - expanded featureset of piece instructions to include checking properties of other pieces
	NEXT
	>>2/20/2022
	 - begin Board-side interperetation of mark phase vectors (keep working on movement algorithm)
3/17/2022
	 - realized everything i did yesterday doesn't work
	 - cleaned up format() and to_string_array() methods in Instruction.gd
	NEXT
	 - fix reading other piece squares for the love of god
3/18/2022
	 - I'm not quite sure what I did and did not fix
	 - added debugging for piece marks using bad stb
	NEXT
	 - keep debugging pieces
3/19/2022
	 - Finished skeleton of the mark() method
	 - fixed Piece.relative_to_square to not have so many rounding errors
	NEXT
	 - add syntax for different types of moves (diagonal, L-path, jump, infinite) to be interpereted by mark() and update wiki to match
	 - optimize stb so I can keep working on it later
3/23/2022
	 - started mark_step() method
	 - redid like half of vectorize() (its better now)
	NEXT
	 - optimize stb
	 - keep working on mark_step()
3/25/2022
	 - finished basics of mark_step
	NEXT
	 - fix conditionals (again >:'|)
	 - optimize stb
3/31/2022
	 - did some debugging here and there
	NEXT
	 - keep working on stb
	 - start setting up movement
4/2/2022
	 - kept working on stb
	NEXT
	 - keep working on stb
	 - start setting up movement
4/4/2022
	 - reworked uv_to_mdata to be more flexible, runs slower
	 - kept working on stb
	NEXT
	 - take a break from stb to start setting up movement
	 - make uv_to_mdata run quickly with a node graph of the mesh
4/5/2022
	 - began redesigning stb on a new, more efficient path
	 - made models for the individual pieces
	NEXT
	 - rework edge_set_intersection to return intersection points as well as indices
	 - START WORKING ON PIECE MOVEMENT YOU LAZY BASTARD
4/10/2022
	 - quit work on stb, meshes are totally beyond me and I keep just getting mad instead of getting any work done
	NEXT
	 - start working on piece movement
4/12/2022
	 - finished JHSSF scholarship (lmao)
	 - got piece selection and logic movement skeleton working
	NEXT
	 - get visual movement working and add movement events
4/14/2022
	 - started repairing conditionals and visuals to work with piece movement
	NEXT
	 - add variable updating via appending variable assigns onto the end of marks
4/20/2022
	- kept working on piece movement, accidentally broke everything. whoops
	NEXT
	 - debug all the shit i broke (mainly mark_step())
4/22/2022
	 - fixed everything (yay!)
4/28/2022
	 - took a break
	 - started working on making board builtins functional and adding more
	 - started working on b_klein board for stress-testing
	NEXT
	 - finish setting up board builtins
	 - start working on either take phase or portals (portals are very scary)
4/29/2022
	 - added rook to b_klein to see how laggy it is (its very laggy)
	 - finished setting up board builtins
	 - encountered a glitch with BoardConverter.raycast that makes it return intersections it probably shouldnt
	NEXT
	 - fix raycast
	 - optimize stb (dread)
	 - study for exams
5/5/2022
	 - mostly finished first half of stb (don't lose it this time)
	 - created mdata_to_array() method to convert uv_to_mdata() and square_to_mdata() values to vertex arrays
	NEXT
	 - fix bug with stb that does not add verts to outer when it should
	 - start NodeGraph class to eventually lead to much more efficient uv_to_mdata() calls
5/8/2022
	 - fixed bug with stb so now it adds verts correctly, only need to finish corners
	 - made MeshGraph and DuplicateMap classes to wrap mdt MeshDataTool and duplicates Dictionary while handling mesh graphs and array to vertex data conversions respectively instead of BoardConverter
	 - realized the extent to which it is going to be a pain in my ass to implement MeshGraph searching into uv_to_mdata(). It will probably require a complete rewrite of Triangle.gd
	NEXT
	 - completely rewrite Triangle.gd to make sense with the current system of vertex arrays and reintegrate it into uv_to_mpos() and uv_to_mdata()
	 - fix raycast() so it always takes the closest point to the from point, not seemingly random intersections
5/13/2022
	 - found a shit ton of bugs with MeshGraph.gd and Triangle.gd
	 - wrote a plan to approach my reconstruction of the triangle searching system
	NEXT
	 - follow plan (carefully)
5/14/2022
	 - revived uv_to_mdata() from a grave as uv_to_mdata_linear()
	 - started adjusting mpos_to_uv() to the new and """improved""" system
	 - finished step 1 of plan to fix my code
	NEXT
	 - figure out why there are so many performance issues with uv_to_mdata_linear() (I'm writing this from my laptop so it might just be slow)
	 - add final pass to mpos_to_uv() so it actually takes the closest triangle and not just a random one
	 - move onto step 2 ._.
5/14/2022.2
	 - cleaned up mpos_to_uv() a bit
	NEXT
	 - reimplement mpos_to_uv() culling
	 - find something to do about the no-surrounding-faces condition
5/15/2022
	 - did some experiments with mpos_to_uv()
	NEXT
	 - rework mpos_to_uv() to use a transform based on the MeshDataTool faces instead of the camera's transform.
5/22/2022
	 - came back from my break to basically finish reworking mpos_to_uv() (good job me!)
	NEXT
	 - add graph searching to mpos_to_uv, then commit Viewport_experimental back to main branch if it works
	 - choose between fleshing out pieces or adding portals
5/27/2022
	 - started preparing DuplicateMap to work with only partial sets of data as keys so normals and uvs do not interfere with its aggregated MeshGraph
	NEXT
	 - finish modifying DuplicateMap and set up MeshGraph to only consider positional duplicates when building its face and vertex sets
5/28/2022
	 - finished reimplementation of uv_to_mdata, DuplicateMap, MeshGraph, and mpos_to_uv. made my code slower in my attempt to make it faster
	NEXT
	 - start making the fucking game
	 - study code optimization
	 - graduate (important)
6/1/2022
	 - implemented uv_to_mdata_bilinear() after noticing oddly high iteration counts in uv_to_mdata_graph()
	 - improved return cases for uv_to_mdata_graph() to drastically decrease iteration count (average 928 to average 2 on b_torus)
	 - added debugging for iteration count and guess tracking for uv_to_mdata_graph() and uv_to_mdata_bilinear
	NEXT
	 - find other parts of the square_to_child() call stack that are laggy
	 - graduate (get dressed, you have to go in like 30 minutes)
	 - start making the fucking game
6/3/2022
	 - tried to speed up get_connected_to_square()
	 - partially succeeded, making the algorithm around 6x faster but at the slight cost of it not working anymore
	NEXT
	 - figure out what's wrong with and fix get_connected_to_square() without bringing back the original complexity
6/5/2022
	 - completed the absolutely herculean task of fixing my own code
	 - optimizations are barely noticeable :(
	NEXT
	 - replace square_to_box() with shader-based method :(
	 - start programming taking phase
6/9/2022
	 - i am now 18 and have paperwork :(
	 - replaced square_to_box() with a shader-based method, it made me sad earlier to throw away all my math but it works so well that im ok with it. also, shader-based method has a really sick 2-pass shader with double-sided normals I love how it looks and it integrates right into the board's base shader
	 - restructured node tree to allow for Viewport based mpos_to_uv system
	 - created UvQuery.gd script to handle new Viewport system
	 - changed file structure to allow pieces to be organized into packs independently of boards
	 - replaced akward sibling and child loops in BoardMesh.gd and Player.gd with export NodePath variables
	NEXT
	 - start programming taking phase
	 - start properly documenting scripts and project usage
6/16/2022
	 - started programming taking phase
	 - restarted wiki documentation
	 - found bug in vectorize() (or maybe evaluate?) centered around line 96
	NEXT
	 - fix da bug
	 - keep programming taking phase
6/17/2022
	 - fixed da bug
	 - continued work on implementing taking, and tangentially provided early support for creating and relocation
	NEXT
	 - continue wiki documentation
	 - finish demo of taking
6/21/2022
 	 - finished taking phase
	 - started documenting syntax for writing pieces
	NEXT
	 - fix bug where setting "px" and "py" in a piece overrides placement but not symmetry rotation
	 - further test piece built-in variables
6/22/2022
	 - adjusted some code to make the px, py, fx, fy, ff, and opacity variables overridable
	 - made variable declarations in the ~ phase of Piece files compatible with conditionals
	NEXT
	 - continue documentation of piece syntax
	 - begin work on creation and relocation phases
6/23/2022
	 - added creation phase and pawn promotion
	 - fixed mistake with Instruction.gd that lead table variables to only be able to be interpereted as lone words, they are now compatible with expressions like originally intended
	 - fixed a bug where old mark sets on the board were overwritten by new ones, making mark indexes fail to be selected correctly when generating behaviors
	 - added functionality for conditionals to begin in the middle of instructions, not just the middle
	 - reworked Board.gd's g phase syntax to interperet teams as a persistent mode like symmetry
	NEXT
	 - continue documentaion of piece syntax
6/24/2022
	 - documented create and take phases
	 - implemented relocation
	 - began testing list
	NEXT
	 - add negation to conditionals
	 - give king castling
	 - go through test list
6/25/2022
	 - documented and fixed relocation
	 - had crisis about most instructions not being compatible with portals
	 - partially went through test list
	NEXT
	 - start designing a way to make instructions compatible with portals
6/29/2022
	 - made mark_step() have power over every square generated by the board, this should allow for portals to be computed within mark_step() and then for those changes to propogate out to any piece moves or behaviors.
	 - made "name" and "mesh" table variables for both boards and pieces
	 - started documenting board syntax. don't think I can finish it without implementing portals
	NEXT
	 - decide whether to first persue a menu, portals, or win conditions
7/2/2022
	 - i decided a menu would be the least difficult thing to set up, so i did. The menu can load any board
	NEXT
	 - add quit to main menu and quit to desktop buttons in-game
	 - reduce warnings and non-fatal errors that occur during gameplay
	 - flesh out some other boards
7/5/2022
	 - reduced debugger errors and warnings to only 7
	 - some of the more significant changes involved making PieceMesh inherit from StaticBody instead of KinematicBody (but RigidBody works to), making Expression methods ignore errors, and adding #warning-ignore comments above a lot of phase methods that aren't using all the arguments given to them by Reader
	NEXT
	 - add quit to main menu 
7/6/2022
	 - added quit to menu and quit to desktop in game
	NEXT
	 - start working on win conditions
7/8/2022
	 - started planning out win conditions in a notebook. I mathematically defined a checkmate as a tree of depth 2, where each layer is a turn. The first turn is the layer of the team getting searched for a checkmate, which branches out into all their possible moves. The next layer is the next team and all their possible moves. If every branch of the first layer has a branch on the second layer where a win condition for the second team or a lose condition for the first team is satisfied, thats checkmate. This doesn't always work as intended with more than 2 teams, so boards should have an option to disable it. Checks are when a teams win condition or another teams lose condition are satisfied by any of its moves outside of its turn, and a stalemate is a checkmate in the absence of a check.
	 - What all that crap basically means is that I need a way to simulate future board states without executing them, and so I need to separate execute_turn() into execute_turn() and compute_turn(), which does this simulation.
	 - made compute_turn()
	 - saw that for relocation to work as intended, relocations need to be reformatted into an array of PoolVector2Arrays of length 2 or more. This way, they are explicitly ordered as they are in a piece's instruction set
	NEXT
	 - reformat relocation
	 - begin working on storage system for simulated board states
7/9/2022
	 - reformatted relocation to use arrays
	 - decided that pieces could mutate other piece's tables in future updates (with current infrastructure it shouldn't be too hard to implement, but it seems unnessecary and difficult to format for users)
	NEXT
	 - begin implementing win conditions
7/11-13/2022
	 - added tables to Team.gd, they can now have variables declared under their definition in the t phase and can "aggregate" values from their pieces' tables by adding them all together
	 - started working on multiple temporary table updates for multiple pieces in compute_turn()
	 - added placeholder w phase to fill out with win condition interperetation
	NEXT
	 - finish implementation of multiple temporary table updates for compute_turn()
	 - begin designing the format for a simple take-the-king win condition in the new w phase
7/24/2022
	 - made p_stage-test.txt to replace pawns with when testing complex behavior
	 - added old_table caching to the relocate stage of compute_turn()
	NEXT
	 - test old_table caching with relocating and implement it for other phases
7/25-26/2022
	 - undid a lot of the work with compute_turn() in favor of simpler systems
	 - merged compute_turn() with execute_turn()
	NEXT
	 - implement triggers for win an lose conditions
	 - rework execute_turn() and changes_from_piece() to have compute-only and execute modes. This is better than having two separate methods execute_turn() and compute_turn() because they do very similar things
7/27/2022
	 - added UI for winning/losing
	 - added win signal to Board and BoardMesh
	NEXT
	 - start adding w phase
	 
8/2/2022
	 - refactored vectorize() again to allow for more flexible addition of different types of conditionals, making way for team conditionals to be used for win conditions
	 - added a flag to SwitchMenu which allows it to not turn invisible if its target signal is detected while it is visible
	 - added a flag to Instruction that makes it not try to format away comments when another script has already done so
	 - added skeleton for team conditions
	 - added ability for winning team to play infinite moves in the background of a finished game
	NEXT
	 - think about how teams should refer to each-other relative to themselves in team conditionals
	 - finish implementing team conditionals
	 - start thinking about making Board look ahead to make checkmate
8/3/2022
	 - did some quick work to set up team conditionals
	 - teams can now be treated more or less like dictionaries
	NEXT
	 - integrate team conditionals into winning and losing
8/4/2022
	 - discovered 2 issues: raycast() and query() stop working when the resolution changes, and black king can't castle.
	 - the first can be fixed by forcing the root viewport to be the same resolution as the window, which apparently doesn't happen normally
	 - the second can be fixed making format() only format the segment its being asked for
	 - also fixed negation with square checks by replacing the NAND check with a XOR check
	NEXT
	>>8/3/2022
8/6/2022
	 - implemented win conditions!
	 - boards now have arrays of winners and losers as team indices
	 - get_team() now has an "offset" argument to make searching neighboring teams more concise
	 - gave vectorize() an argument to ignore conditionals, which could occasionally be advantageous for efficiency
	NEXT
	 - make the Game Over screen display the winners and losers
	 - make turn a table property for both boards and teams
	 - make the t phase able to adjust team table properties after a team is initialized
	 - test update_table_line() with conditionals
8/10/2022
	 - implemented option for update_table_line() to use vectorize() to check for conditionals, not sure how much use it will see
	 - made DisplayDictionary class to transfer a results dictionary from BoardMesh to the Game Over UI, it's... working. It's not working great, but it's working.
	 - discovered that t phase was already able to declare variables for the last defined team, thanks past me!
	 - made turn a table property for both boards and teams
	NEXT
	 - start designing a system for looking ahead one turn for checkmate
8/12/2022
	 - changed highlights shader to use a single texture with a size of the board, this causes some wierd bugs with outlines of wrong squares being highlighted
	 - added PieceType class which allows Board to only load pieces of each type once for their initialized behaviors, and then place them in the correct places and with the correct states in Piece
	 - added skeleton of BoardState class which will hold minimized states of the Board on each turn and be crucial to checkmates
	 - data from PieceType is essentially removed from Piece, making Pieces their own minimized PieceState
	NEXT
	 - plan how to make execute_turn() create a new BoardState and then apply that to Board instead of modifying Board directly
8/14/2022
	 - started looking at execute_turn() to see what needed changes before BoardState can be fully implemented
	 - the rust left over from when compute_turn() was still a thing needs to be fully taken care of, so I moved the actual board updating into changes_from_piece()
	NEXT
	 - change behaviors into an array of arrays and changes_from_piece() to function with that. This will allow changes_from_piece() to only be called once over the whole array, checking maybe the first element to see the mark each behavior is attached to
8/15/2022
	 - changed behaviors into an array
	 - renamed changes_from_piece() to the now more appropriate execute_behaviors(), and added a "transformed" argument to mask out indices of behaviors that do not need to be transformed, allowing the original move to be executed as part of this method
	 - made Board.has() the first guinea pig in using BoardStates as a functional depiction of the board, its buggy as shit
	 - made move_piece(), make_piece(), and erase() properly interact with states and Piece.last_update
	 - found that team table updates don't work
	NEXT
	 - fix has() to not stop working after the game ends
	 - fix team table updates
	 - expand BoardStates to the point that the pieces Dictionary is more or less vestigial, so that execute_turn and mark() now function entirely off of the states Array instead of the pieces Dictionary
8/16/2022
	 - completely removed pieces from Board, making the states Array, has(), and get_piece() do all the heavy lifting
	 - fixed team table updates
	 - replaced the halting of turns causing a victoy lap with a team "lock" index in Board that stops teams from changing while turns progress as normal
	 - unflipped Board._to_string() and reworked Team._to_string() to work similarly to BoardState.to_string()
	 - made new states use duplicated pieces in order to not modify old ones, depricating Piece.last_update in favor of filling null in a state's pieces Dictionary when a piece from the last state has been deleted

	 - all in a days work :) -

	NEXT
	 - implement a way of locking the board to a particular state to check forward, and a way to store those forward turns
8/18/2022
	 - implemented Board.revert() and BoardMesh.revert() along with some complementary methods, these methods allow any previous turn on the Board to be loaded at any time (with a lot of lag)
	 - the most important of these complementary methods is BoardMesh.synchronize(), which can force BoardMesh to visually match the contents of its Board if they get separated
	 - made execute_turn() act on a duplicate of a piece instead of the original to avoid changing states when it isn't supposed to
	NEXT
	 - move execute_behaviors() and execute_turn() into BoardState, and have Board.execute_turn() wrap BoardState.execute_turn()
	 - allow BoardState to store future versions of itself
8/19/2022
	 - deemed execute_turn() being moved to BoardState as unnessecary. I'd prefer if Board acts on BoardStates instead of BoardStates mutating themselves
	 - reworked args of execute_turn() to have flags for if it appends its state or increments turn, and so changes is an input and the new state is the return value, this allows for "simulated turns." The main issue with this system is that the turn manipulation required to simulate a turn is very finnicky
	NEXT
	 - make method in Board to find all possible moves and store them into a tree of States
	 - try to make turns less finnicky with unapplied states
8/20/2022
	 - made smark() method to generate potential board states
	 - learned execute_turn() is slow as hell, but inconsistently so
	NEXT
	 - figure out what makes execute_turn() slow and optimize it
8/20/2022
	 - renamed smark() to project_states() and added submethod project_states_from_piece()
	 - added depth argument for project_states() that allows for any number of turns to be generated
	 - fixed all bugs pertaining to projected states interfereing with the pieces Dictionaries and tables of teams
	 - greatly increased the speed of execute_turn() by amortizing its Reader section to PieceType and having Piece generate behaviors from its PieceType without rereading the file
	 - realized the hard truth that project_states() will be really slow at a depth of 2 no matter what
	NEXT
	 - add debug ui for measuring the execution time of different functions
	 - think of small optimizations for project_states() (maybe optimizations are in vectorize()?)
	 - add an option for execute_turn() to reread behaviors like it used to
8/22/2022
	 - took a break from all the math to rework Player.gd and the movement system
	 - found a bug where square selections can persist through different boards
	NEXT
	 - finish up with reworking player then >>8/20/2022
8/23/2022
	 - added debug ui and way for non-nodes to access and give the debugger data with the new Accessor singleton (i finally figured them out!), Instruction and the like are no longer limited by the fact that they aren't nodes
	 - made Piece not a Node, which relieves a lot of memory-freeing issues
	 - found that vectorize() and mark_step() are about as fast as they will ever be, the only way to make project_states() faster is to break out early at special conditions
	 - made a filter for the mouse to have a custom graphic
	NEXT
	 - think of how to make check work with project_states()
	 
 --college--
	
9/11/2022
	 - realized Teams cannot properly check win conditions without being integrated into the BoardState system
	 - made Board handle a current pieces array again for Team to reference, generally offloaded Team work onto Board
	 - broke win conditions
	NEXT
	 - trace back why win conditions arent working and then fix them
9/14/2022
	 - integrated Team into the BoardState system
	 - adjusted the win condition on b_default to check the current turn and not 1 turn into the past
	NEXT
	 - implement some sort of cache into the BoardState system using BoardState.possible and project_states() to further amortize Board computations
	 - optimize get_piece() by integrating current into its design
9/15/2022
	 - realized Team's integration didn't work and got rid of it for now
	 - made Board update current correctly without BoardMesh's help
	 - made generalized method for converting piece Dictionaries to strings in BoardConverter
	 - narrowed down bug to the last moved piece not showing up in the get_pieces() Dictionary
	NEXT
	 - fix it
9/20/2022
	 - fixed it
	NEXT
	 - make get_pieces() search up from the current piece array instead of the origin of time, same with get_piece()
	 - rename Board.execute_turn() so the name can encapsulate running a turn and projecting states without freezing
9/28/2022
	 - Optimized get_piece() and get_pieces() to be pretty damn quick
	 - began implementing super_mark() and Board.handle(), but ran into a problem where execute turn needs a setting for how it handles the marks dictionary
	NEXT
	 - make opposite version of revert() method (maybe append()?) that adds a new state like execute_turn() without interpereting and instruction from marks
9/29/2022
	 - Removed changes array from the execute_turn() stack in place of pieces referring to their last copy
	NEXT
	 - Use new system to support the new method
10/1/2022
	 - Added Board.append() method (to say the least)
	 - added default names to the default teams
	 - replaces Board.can_take_from() with Board.can_take_piece(), which drastically lowers the number of searches through the board
	NEXT
	 - remove possible states from marks if they have losing conditions for the responsible team, effectively implementing illegal moves
	 - plan how to detect a check and communicate it with the player
10/8/2022
	 - fixed get_pieces() for the 10 squadrillionth time
	NEXT
	 - take a break from all this math and do some UI and control fixes (i.e. camera spinning out of range while the game loads / game crash when a bad file path is attempted to be loaded)
10/17/2022
	 - Removed restrictions from the camera
	 - Losing my mind over the project_states()' bugs
	NEXT
	 - Make some proper unit tests for the code used in project_states()
